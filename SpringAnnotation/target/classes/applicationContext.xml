<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <context:annotation-config/>

    <!--to enable AOP aspect weave-->
    <aop:aspectj-autoproxy/>
    <!--specify where beans locate-->
    <context:component-scan base-package="com.neuedu.testannotation"/>
    <context:component-scan base-package="com.neuedu.model.service"/>
    <context:component-scan base-package="com.neuedu.aspect"/>
    <context:component-scan base-package="com.neuedu.model.dao"/>

    <!--because around advice is very powerful, it is used very often, inside one aspect there is only one method
        
        in this case, only specify aspect and pointcut is enough
        
        if a aspect only have one advice(before, around...), we can call it advisor
        
        for the configuration, only specify aop:advisor and aop:advisor-->
    <aop:config>
        <aop:aspect id="losAspect" ref="logAsPect">
            <aop:pointcut id="logpc" expression="execution(* com.neuedu.model.service.*.*(..))"/>
            <aop:before pointcut-ref="logpc" method="before" />
            <aop:after pointcut-ref="logpc" method="after" />
            <aop:after-returning pointcut-ref="logpc" method="afterReturning" />
            <aop:after-throwing pointcut-ref="logpc" method="afterThrowing" />
        </aop:aspect>
    </aop:config>

    <!--config advisor-->
    <!--顾问，区别于切面，很多的切面类中其实写一个@Around，为了不这么像上面的那么麻烦
        那么对于只有一个切面的情况，我们就设置一个advisor，当实现不同的接口的时候来判断是@After @Around或是其他的什么-->
    <!--<aop:config>-->
        <!--<aop:advisor advice-ref="transactionAdvisor" pointcut="execution(* com.neuedu.model.service.*.*(..))"/>-->
    <!--</aop:config>-->
</beans>
